(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{362:function(e,t,a){e.exports=a.p+"assets/img/venus-cluster.2e72d412.png"},409:function(e,t,a){"use strict";a.r(t);var n=a(25),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"venus集群组件介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#venus集群组件介绍"}},[e._v("#")]),e._v(" Venus集群组件介绍")]),e._v(" "),n("p",[e._v("Venus是Filecoin分布式矿池的实现方案之一，系统集群组件包括：Venus，Venus-auth，Venus-miner，Venus-wallet，Venus-messager，Venus-sealer。从概念上理解其中Venus、Venus-auth、Venus-miner、Venus-wallet、Venus-messager具备可共用性（即程序可被多个矿工身份使用，在保证效率的情况下使硬件，软件资源得到充分利用），而Venus-sealer、Venus-worker、Venus-wallet主要用于积累算力。Venus-wallet属于可选组件，基于部署情况的安全性考量，Venus-wallet可以共享使用，也可以本地部署。本篇文档为nerpda测试网络下的集群部署。")]),e._v(" "),n("p",[n("img",{attrs:{src:a(362),alt:"venus-cluster"}})]),e._v(" "),n("h1",{attrs:{id:"venus集群部署-基于nerpa测试网"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#venus集群部署-基于nerpa测试网"}},[e._v("#")]),e._v(" Venus集群部署（基于nerpa测试网）")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("程序")]),e._v(" "),n("th",[e._v("服务器")]),e._v(" "),n("th",[e._v("类型")]),e._v(" "),n("th",[e._v("作用")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("Venus-auth")]),e._v(" "),n("td",[e._v("<IP1>")]),e._v(" "),n("td",[e._v("共享")]),e._v(" "),n("td",[e._v("Venus-auth 用于统一授权，当矿工组件访问共享组件的时候需要使用此服务注册生成的token")])]),e._v(" "),n("tr",[n("td",[e._v("Venus-wallet")]),e._v(" "),n("td",[e._v("<IP2>")]),e._v(" "),n("td",[e._v("共享")]),e._v(" "),n("td",[e._v("钱包管理，数据签名")])]),e._v(" "),n("tr",[n("td",[e._v("Venus")]),e._v(" "),n("td",[e._v("<IP3>")]),e._v(" "),n("td",[e._v("共享")]),e._v(" "),n("td",[e._v("Filecoin节点数据同步")])]),e._v(" "),n("tr",[n("td",[e._v("Venus-messager")]),e._v(" "),n("td",[e._v("<IP4>")]),e._v(" "),n("td",[e._v("共享")]),e._v(" "),n("td",[e._v("管理集群中的消息，保证消息上链，控制消息流量，重试等。可对接多个钱包，针对这些钱包做消息管理")])]),e._v(" "),n("tr",[n("td",[e._v("Venus-miner")]),e._v(" "),n("td",[e._v("<IP5>")]),e._v(" "),n("td",[e._v("共享")]),e._v(" "),n("td",[e._v("打包出块消息，可配置多个矿工，会自行计算矿工出块情况，并通过远程访问Venus-sealer获取数据证明")])]),e._v(" "),n("tr",[n("td",[e._v("Venus-sealer")]),e._v(" "),n("td",[e._v("<IP6>")]),e._v(" "),n("td",[e._v("非共享")]),e._v(" "),n("td",[e._v("数据封装")])])])]),e._v(" "),n("p",[e._v("Tips:")]),e._v(" "),n("ul",[n("li",[e._v("以下所有"),n("code",[e._v("<>")]),e._v("都是需替换参数，根据自己的实际情况替换")]),e._v(" "),n("li",[e._v("具体版本请自行使用git checkout选择")]),e._v(" "),n("li",[e._v("环境依赖：\n"),n("ul",[n("li",[e._v("golang ^1.15\n"),n("ul",[n("li",[e._v("go env -w GOPROXY=https://goproxy.cn,direct")]),e._v(" "),n("li",[e._v("go env -w GO111MODULE=on")])])]),e._v(" "),n("li",[e._v("git")])])])]),e._v(" "),n("h2",{attrs:{id:"_1-venus-auth-install"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-venus-auth-install"}},[e._v("#")]),e._v(" 1. Venus-auth Install")]),e._v(" "),n("h3",{attrs:{id:"编译并启动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编译并启动"}},[e._v("#")]),e._v(" 编译并启动")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ git clone https://github.com/ipfs-force-community/venus-auth.git\n\n$ cd venus-auth\n\n$ make \n\n$ nohup ./venus-auth > auth.log 2>&1 &\n\n")])])]),n("ul",[n("li",[e._v("Venus-auth服务默认配置文件目录为 ~/.venus-auth/config.toml")]),e._v(" "),n("li",[e._v("存储方案默认为badger内嵌kv数据库，也支持MYSQL存储，需要自行修改配置文件后启动。")]),e._v(" "),n("li",[e._v("log存储默为控制台打印，同时支持influxDB存储")])]),e._v(" "),n("h4",{attrs:{id:"mysql存储启动-可选"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mysql存储启动-可选"}},[e._v("#")]),e._v(" MYSQL存储启动（可选）")]),e._v(" "),n("p",[e._v("Tips: MYSQL支持5.7以上官方版本（如云平台MYSQL默认设置各有不同，请自己结合云平台修改配置，否则可能会出现 “ Specified key was too long; max key length is 767 bytes ”）")]),e._v(" "),n("ul",[n("li",[e._v("初始化数据库及表")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("CREATE DATABASE `venus_auth` /*!40100 DEFAULT CHARACTER SET utf8 */;\nUSE `venus_auth`;\n\nCREATE TABLE `token` (\n     `name` varchar(50) NOT NULL,\n     `token` varchar(512) NOT NULL,\n     `createTime` datetime NOT NULL,\n     `perm` varchar(50) NOT NULL,\n     `extra` varchar(255) DEFAULT NULL,\n     UNIQUE KEY `token_token_IDX` (`token`) USING HASH\n) ENGINE=InnoDB\n  DEFAULT CHARSET = utf8\n  COLLATE = utf8_general_ci;\n\n")])])]),n("ul",[n("li",[e._v("修改Venus-auth config中的db设置")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('$ vim ~/.venus-auth/config.toml\n\n# 数据源配置项\n[db]\n# support: badger (default), mysql \n# the mysql DDL is in the script package \ntype = "mysql" \n# The following parameters apply to MySQL\nDSN = "root:111111@(127.0.0.1:3306)/venus_auth?parseTime=true&loc=Local&charset=utf8mb4&collation=utf8mb4_unicode_ci&readTimeout=10s&writeTimeout=10s"\n# conns 1500 concurrent\nmaxOpenConns = 64\nmaxIdleConns = 128\nmaxLifeTime = "120s"\nmaxIdleTime = "30s"\n\n')])])]),n("ul",[n("li",[e._v("启动")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ nohup ./venus-auth > auth.log 2>&1 &\n\n")])])]),n("h3",{attrs:{id:"注册生成各个组件的token"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注册生成各个组件的token"}},[e._v("#")]),e._v(" 注册生成各个组件的token")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ ./venus-auth genToken --perm admin miner\n<auth token miner>\n\n$ ./venus-auth genToken --perm admin messager\n<auth token messager>\n\n$ ./venus-auth genToken --perm admin sealer\n<auth token sealer>\n")])])]),n("ul",[n("li",[n("code",[e._v("<auth token ?>")]),e._v(" 格式统一为 JWT token")]),e._v(" "),n("li",[e._v("这些token之后会被各个程序使用，用以对集群接入组件做验证")]),e._v(" "),n("li",[n("code",[e._v("--perm")]),e._v("为RPC2.0接口访问权限限制")]),e._v(" "),n("li",[e._v("miner，messager，sealer，推荐标记为程序名，若存在多个相同程序要加入集群，可以使用“程序名+标记符”。")])]),e._v(" "),n("h2",{attrs:{id:"_2-venus-install"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-venus-install"}},[e._v("#")]),e._v(" 2. Venus install")]),e._v(" "),n("h3",{attrs:{id:"安装编译环境"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装编译环境"}},[e._v("#")]),e._v(" 安装编译环境")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("sudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm; sudo yum install -y git gcc bzr jq pkgconfig clang llvm mesa-libGL-devel opencl-headers ocl-icd ocl-icd-devel hwloc-devel\n")])])]),n("h3",{attrs:{id:"编译并启动-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编译并启动-2"}},[e._v("#")]),e._v(" 编译并启动")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ git clone https://github.com/filecoin-project/venus.git\n\n$ cd venus\n\n$ make deps\n\n$ make\n\n// 启动venus daemon 设置网络与Venus-auth的地址\n// 启动成功后tail -f venus.log 可以看到数据同步的log\n// 这里需要等待一段时间\n$ nohup ./venus daemon --network nerpa \\\n--authURL http://<IP1>:8989 \\\n> venus.log 2>&1 & \n\n")])])]),n("ul",[n("li",[n("code",[e._v("--authURL")]),e._v(" 为设置Venus-auth监听http地址")])]),e._v(" "),n("h3",{attrs:{id:"修改ipv4监听地址"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修改ipv4监听地址"}},[e._v("#")]),e._v(" 修改IPV4监听地址")]),e._v(" "),n("p",[e._v("目前程序启动后默认监听地址为"),n("code",[e._v("127.0.0.1:3453")]),e._v("，对于跨服务器集群，需要修改监听策略，可以通过"),n("code",[e._v("lsof -i:3453")]),e._v(" 查询到进程后，Kill掉进程，修改IPV4策略后重启")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('vim ~/.venus/config.json\n\n做如下操作，修改为监听所有本机IPV4地址：\nreplace api.apiAddress from \n"/ip4/127.0.0.1/tcp/3453"  to  "/ip4/0.0.0.0/tcp/3453"\n\n修改完毕后重启服务：\n$ nohup ./venus daemon --network nerpa \\\n--authURL http://<IP1>:8989 \\\n> venus.log 2>&1 & <absolute path>\n\n')])])]),n("h2",{attrs:{id:"_3-venus-wallet-install"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-venus-wallet-install"}},[e._v("#")]),e._v(" 3. Venus-wallet install")]),e._v(" "),n("h3",{attrs:{id:"编译并启动-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编译并启动-3"}},[e._v("#")]),e._v(" 编译并启动")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ git clone https://github.com/ipfs-force-community/venus-wallet.git\n\n$ cd venus-wallet \n\n// 编译\n$ make\n\n// 启动\n$ nohup ./venus-wallet run  --network test> wallet.log 2>&1 &\n")])])]),n("h3",{attrs:{id:"设置密码并创建钱包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#设置密码并创建钱包"}},[e._v("#")]),e._v(" 设置密码并创建钱包")]),e._v(" "),n("blockquote",[n("p",[e._v("此处创建了2个BLS钱包，用于之后的Venus-sealer初始化")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 设置加解锁密码\n$ ./venus-wallet setpwd\nPassword:******\nEnter Password again:******\n\n// 生成BLS地址\n$ ./venus-wallet new bls\n<bls address 1>\n$ ./venus-wallet new bls\n<bls address 2>\n")])])]),n("ul",[n("li",[n("code",[e._v("<bls address 1>")]),e._v(" 为86位长度地址")])]),e._v(" "),n("h4",{attrs:{id:"注意"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[e._v("#")]),e._v(" 注意")]),e._v(" "),n("p",[e._v("新生成的"),n("code",[e._v("<bls address 1>")]),e._v(" "),n("code",[e._v("<bls address 2>")]),e._v("需要到https://faucet.nerpa.interplanetary.dev/funds.html中预充balance后才能在链上生成actor。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ ./venus-wallet auth api-info --perm admin\n<wallet jwt token>\n")])])]),n("h2",{attrs:{id:"_4-venus-messager-install"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-venus-messager-install"}},[e._v("#")]),e._v(" 4. Venus-messager install")]),e._v(" "),n("h3",{attrs:{id:"编译并启动-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编译并启动-4"}},[e._v("#")]),e._v(" 编译并启动")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('$ git clone https://github.com/ipfs-force-community/venus-messager.git\n\n$ cd venus-messager\n\n$ make deps\n\n$ make \n\n# 启动venus-message 进程\n$ nohup ./venus-messager run \\\n--auth-url=http://<IP1>:8989 \\\n--node-url /ip4/<IP3>/tcp/3453 \\\n--node-token <auth token messager> \\\n--db-type mysql \\\n--mysql-dsn "root:111111@tcp(127.0.0.1:3306)/cali_venus?parseTime=true&loc=Local&readTimeout=10s&writeTimeout=10s" \\\n> msg.log 2>&1 &\n\n')])])]),n("ul",[n("li",[n("code",[e._v("--auth-url")]),e._v(" 为设置Venus-auth监听地址")]),e._v(" "),n("li",[n("code",[e._v("--node-url")]),e._v(" 为Venus监听地址")]),e._v(" "),n("li",[n("code",[e._v("--node-token")]),e._v(" 为使用Venus-auth中注册的JWT token代表自身节点，用于和Venus通信时的身份验证")])]),e._v(" "),n("h3",{attrs:{id:"添加钱包链接-可以添加多个钱包链接"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#添加钱包链接-可以添加多个钱包链接"}},[e._v("#")]),e._v(" 添加钱包链接（可以添加多个钱包链接）")]),e._v(" "),n("blockquote",[n("p",[e._v("这边会周期性监控"),n("code",[e._v("Venus-wallet")]),e._v("的钱包可访问地址变化 "),n("br"),e._v("\n做延时性动态跟踪，依赖于"),n("code",[e._v("Venus-wallet")]),e._v("处的"),n("code",[e._v("list")]),e._v("接口")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ ./venus-messager wallet add \\\n--name testminer --url /ip4/<IP2>/tcp/5678/http \\\n--token <wallet jwt token> \n\n# 查询钱包列表\n$ ./venus-messager wallet list\n")])])]),n("ul",[n("li",[n("code",[e._v("--name")]),e._v(" 为给Venus-messager添加钱包链接命名")]),e._v(" "),n("li",[n("code",[e._v("--url")]),e._v(" 为设置Venus-wallet监听地址")]),e._v(" "),n("li",[n("code",[e._v("--token")]),e._v(" 为设置Venus-wallet中获得的接口授权JWT token,查看Venus-wallet install中"),n("code",[e._v("<wallet jwt token>")]),e._v("处可查看token如何获得")])]),e._v(" "),n("h2",{attrs:{id:"_5-venus-sealer-install"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-venus-sealer-install"}},[e._v("#")]),e._v(" 5. Venus-sealer install")]),e._v(" "),n("h3",{attrs:{id:"sealer-存在2类jwt-token的概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sealer-存在2类jwt-token的概念"}},[e._v("#")]),e._v(" sealer 存在2类JWT token的概念")]),e._v(" "),n("ol",[n("li",[e._v("本地JWT token "),n("code",[e._v("<sealer jwt token>")]),e._v(" 用于其他服务访问sealer")]),e._v(" "),n("li",[e._v("Venus-auth 注册的JWT token "),n("code",[e._v("<auth token sealer>")]),e._v("，用于sealer访问messager")])]),e._v(" "),n("h3",{attrs:{id:"编译并启动-sealer单程序只能绑定一个矿工"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编译并启动-sealer单程序只能绑定一个矿工"}},[e._v("#")]),e._v(" 编译并启动（sealer单程序只能绑定一个矿工）")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ git clone https://github.com/filecoin-project/venus-sealer.git\n\n$ cd venus-sealer\n\n$ make deps\n\n$ make\n\n")])])]),n("h4",{attrs:{id:"初始化新矿工-2选1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初始化新矿工-2选1"}},[e._v("#")]),e._v(" 初始化新矿工（2选1）")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ nohup ./venus-sealer init \\\n--worker <bls address 1> \\\n--owner <bls address 2>  \\\n--sector-size 512M \\\n--network nerpa \\\n--node-url /ip4/<IP3>/tcp/3453 \\\n--node-token <auth token sealer> \\\n--messager-url http://<IP4>:39812/rpc/v0 \\\n--no-local-storage \\\n--messager-token <auth token sealer> \\\n--wallet-name testminer \\\n> sealer.log 2>&1 &\n\n")])])]),n("h4",{attrs:{id:"初始化已存在矿工-2选1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初始化已存在矿工-2选1"}},[e._v("#")]),e._v(" 初始化已存在矿工（2选1）")]),e._v(" "),n("blockquote",[n("p",[e._v("不需要指定"),n("code",[e._v("--sector-size")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ nohup ./venus-sealer init \\\n--actor <t0 addr>  \\\n--network nerpa \\\n--node-url /ip4/<IP3>/tcp/3453 \\\n--node-token <auth token sealer> \\\n--messager-url http://<IP4>:39812/rpc/v0 \\\n--no-local-storage \\\n--messager-token <auth token sealer> \\\n--wallet-name testminer \\\n> sealer.log 2>&1 &\n\n")])])]),n("h4",{attrs:{id:"指定存储目录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#指定存储目录"}},[e._v("#")]),e._v(" 指定存储目录")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# 因为指定了--no-local-storage\n# 所以需要指定sealer存储目录\n$ ./venus-sealer storage attach --init --store --seal <absolute path>\n")])])]),n("ul",[n("li",[n("code",[e._v("--wallet-name testminer")]),e._v(" 为Venus-messager中add 的wallet 连接，所以在wallet中，这边指定的worker和owner必须在Venus-wallet中存在")]),e._v(" "),n("li",[n("code",[e._v("<bls address 1>")]),e._v(" "),n("code",[e._v("<bls address 2>")]),e._v(" 为Venus-wallet中创建的BLS钱包地址，注意这2个钱包地址都需要有balance")]),e._v(" "),n("li",[n("code",[e._v("<auth token sealer>")]),e._v("为Venus-auth中注册的JWT token")]),e._v(" "),n("li",[n("code",[e._v("<absolute path>")]),e._v("为绝对路径")])]),e._v(" "),n("h4",{attrs:{id:"查看日志等待消息上链注册actor地址"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#查看日志等待消息上链注册actor地址"}},[e._v("#")]),e._v(" 查看日志等待消息上链注册actor地址")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ tail -f sealer.log\n\n2021-04-25T18:41:31.925+0800\tINFO\tmain\tvenus-sealer/init.go:182\tChecking if repo exists\n2021-04-25T18:41:31.926+0800\tINFO\tmain\tvenus-sealer/init.go:217\tChecking full node version\n2021-04-25T18:41:31.927+0800\tINFO\tmain\tvenus-sealer/init.go:233\tInitializing repo\n2021-04-25T18:41:31.928+0800\tINFO\tmain\tvenus-sealer/init.go:309\tInitializing libp2p identity\n2021-04-25T18:41:32.082+0800\tINFO\tmain\tvenus-sealer/init.go:485\tPushed CreateMiner message: aaf489f9-af4b-4e4b-9084-018d43f05b7e\n2021-04-25T18:41:32.082+0800\tINFO\tmain\tvenus-sealer/init.go:486\tWaiting for confirmation\n2021-04-25T18:46:32.088+0800\tINFO\tmain\tvenus-sealer/init.go:502\tNew miners address is: t01640 (t2cxzf7xvrqo3froqn2xgdqjdbydhkcrgakj7j3ma)\n2021-04-25T18:46:32.088+0800\tINFO\tmain\tvenus-sealer/init.go:381\tCreated new miner: t01640\n2021-04-25T18:46:32.089+0800\tINFO\tmain\tvenus-sealer/init.go:302\tSealer successfully created, you can now start it with 'venus-sealer run'\n")])])]),n("h4",{attrs:{id:"启动sealer并执行sector封装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#启动sealer并执行sector封装"}},[e._v("#")]),e._v(" 启动sealer并执行sector封装")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ nohup ./venus-sealer run >> sealer.log 2>&1 &\n\n# 执行sector封装，这个命令只支持单次\n# 可以通过crontab 做定时任务，也可以自行编写策略脚本执行\n$ ./venus-sealer sectors pledge \n\n# 查看sector列表\n$ ./venus-sealer sectors list\n\n# 查看actor地址\n# 这里为<t0 addr>\n$ ./venus-sealer info\n\nChain: [sync ok] [basefee 100 aFIL]\nSealer: <t0 addr> (512 MiB sectors)\nPower: 0  / 15 Ti (0.0000%)\n\tRaw: 0 B / 1.5 TiB (0.0000%)\n\tCommitted: 3 GiB\n\tProving: 0 B\nBelow minimum power threshold, no blocks will be won\nSealer Balance:    383.869 FIL\n      PreCommit:  0\n      Pledge:     93.75 mFIL\n      Vesting:    0\n      Available:  383.775 FIL\nMarket Balance:   0\n       Locked:    0\n       Available: 0\nWorker Balance:   1000 FIL\nTotal Spendable:  1383.775 FIL\n")])])]),n("h2",{attrs:{id:"_6-venus-miner-install"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-venus-miner-install"}},[e._v("#")]),e._v(" 6. Venus-miner install")]),e._v(" "),n("h3",{attrs:{id:"编译并启动-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编译并启动-5"}},[e._v("#")]),e._v(" 编译并启动")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('$ git clone https://github.com/filecoin-project/venus-miner.git\n\n$ cd venus-miner\n\n$ make nerpanet\n\n# 初始化环境配置\n$ ./venus-miner init --api /ip4/<IP3>/tcp/3453 --token <auth token miner>\n\n# 启动miner\n$ nohup ./venus-miner run >>miner.log 2>& 1 &\n\n\n$ ./venus-miner address add \\\n--addr <t0 addr> \\\n--sealer-listen-api /ip4/<IP6>/tcp/2345/http \\\n--sealer-token <sealer jwt token> \\\n--wallet-listen-api /ip4/<IP2>/tcp/5678/http \\\n--wallet-token <wallet jwt token> \n\n# print\nadd miner:  {<t0 addr> {...}}\n\n\n# 查询miner状态\n$ ./venus-miner address state \n# print\n[\n\t{\n\t\t"Addr": "<t0 addr>",\n\t\t"IsMining": true,\n\t\t"Err": ""\n\t}\n]\n\n# 如果IsMining为false\n# 需要执行\n$ ./venus-miner address start <t0 addr>\n\n# 因为miner支持多矿工\n# 可以通过以下指令查看所有关联矿工\n# 对于矿工的启停可以自行安排\n$ ./venus-miner address list\n')])])]),n("ul",[n("li",[n("code",[e._v("<t0 addr>")]),e._v("在Venus-sealer install部分查看")]),e._v(" "),n("li",[n("code",[e._v("<sealer jwt token>")]),e._v("为Venus-sealer节点JWT token，切换到对应服务器后"),n("code",[e._v("cat ~/.venussealer/token")]),e._v("可获得")]),e._v(" "),n("li",[n("code",[e._v("<wallet jwt token>")]),e._v(" 为设置Venus-wallet中获得的接口授权JWT token,查看Venus-wallet install中"),n("code",[e._v("<wallet jwt token>")]),e._v("处可查看token如何获得")])]),e._v(" "),n("h2",{attrs:{id:"问题相关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#问题相关"}},[e._v("#")]),e._v(" 问题相关")]),e._v(" "),n("ol",[n("li",[e._v("go mod 出先如下问题")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("SECURITY ERROR\nThis download does NOT match an earlier download recorded in go.sum.\nThe bits may have been replaced on the origin server, or an attacker may\nhave intercepted the download attempt.\n\n\n# 解决方案\ngo clean -modcache\ngo mod tidy\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);